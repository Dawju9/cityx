# Ten plik wally.toml definiuje zależności i strukturę projektu CityX,
# który jest proceduralnym i modularnym frameworkiem gry.
#
# Projekt jest podzielony na kilka komponentów:
# 1. Wspólne zależności: Używane w całym projekcie, w tym Matter ECS do logiki gry,
#    Roact do UI i różne biblioteki narzędziowe.
#
# 2. Zależności specyficzne dla serwera: Obejmują Matter ECS i Promise, prawdopodobnie do obsługi
#    stanu gry i operacji asynchronicznych po stronie serwera.
#
# 3. Zależności specyficzne dla klienta: Obejmują Roact, Signal i Trove, które są powszechnie
#    używane do budowania interfejsów użytkownika i zarządzania zasobami w grach Roblox.
#
# 4. Zależności specyficzne dla renderera: Zawierają tylko Roact, sugerując oddzielny komponent
#    renderujący, który głównie zajmuje się UI lub elementami wizualnymi.
#
# Plik zawiera również zależności deweloperskie i flagi funkcji, umożliwiające
# warunkową kompilację i integrację narzędzi.
#
# Ta struktura wspiera architekturę klient-serwer, gdzie:
# - Serwer (backend) obsługuje logikę gry, zarządzanie stanem i potencjalnie integruje się
#   z usługami zewnętrznymi (np. bot Discord, usługi internetowe).
# - Klient (frontend oparty na Roblox) zarządza interfejsem użytkownika i lokalnym stanem gry.
# - Komponent renderujący może obsługiwać specjalistyczne zadania renderowania lub generowanie zasobów.
#
# Komunikacja między tymi komponentami prawdopodobnie odbywa się poprzez protokoły sieciowe
# (np. HTTP, WebSocket) ułatwione przez platformę Roblox i potencjalnie niestandardowe
# rozwiązania sieciowe.


[package]
name = "whitekali/cityx"
description = "CityX - The Si'automaticion city 'x' procedural and modular game framework"
version = "0.1.0"
license = "MIT OR Apache-2.0"
authors = ["Whitekali <Discord: whitekali> <whitekali@aya.studio> <@251838559680593920>"]
realm = "shared"
registry = "https://github.com/UpliftGames/wally-index"

[dependencies]
matter = "matter-ecs/matter@0.8.3"
roact = "roblox/roact@1.4.0"
base64 = "reselim/base64@3.0.0"
signal = "sleitnick/signal@2.0.1"
trove = "sleitnick/trove@1.3.0"
promise = "evaera/promise@4.0.0"
actix-rt = "2"
actix-web = "4"
serde = { version = "1.0", features = ["derive"] }
serenity = { version = "0.11", features = ["client", "gateway", "http", "model", "cache"] }
tokio = { version = "1", features = ["full"] }
env_logger = "0.10"
log = "0.4"
config = "0.13"
serde_yaml = "0.9"
thiserror = "1"
chrono = "0.4"
uuid = { version = "1", features = ["v4"] }

[server-dependencies]
matter = "matter-ecs/matter@0.8.3"
promise = "evaera/promise@4.0.0"

[client-dependencies]
roact = "roblox/roact@1.4.0"
signal = "sleitnick/signal@2.0.1"
trove = "sleitnick/trove@1.3.0"

[renderer-dependencies]
roact = "roblox/roact@1.4.0"

[dev-dependencies]
insta = { version = "1.1.0" }

[features]
selene = []
wally = []
tools = ["wally", "selene"]
vendored-libgit2 = ["git2/vendored-libgit2"]

[tools]
wally = { source = "upliftgames/wally", version = "0.3.2" }
selene = { source = "Kampfkarren/selene", version = "0.22.0" }

# Mechanizm działania klient-serwer:
# Ten plik wally.toml definiuje zależności i strukturę projektu CityX,
# który jest proceduralnym i modularnym frameworkiem gry.
# 
# Projekt jest podzielony na kilka komponentów:
# 1. Wspólne zależności: Używane w całym projekcie, w tym Matter ECS do logiki gry,
#    Roact do UI i różne biblioteki narzędziowe.
# 
# 2. Zależności specyficzne dla serwera: Obejmują Matter ECS i Promise, prawdopodobnie do obsługi
#    stanu gry i operacji asynchronicznych po stronie serwera.
# 
# 3. Zależności specyficzne dla klienta: Obejmują Roact, Signal i Trove, które są powszechnie
#    używane do budowania interfejsów użytkownika i zarządzania zasobami w grach Roblox.
# 
# 4. Zależności specyficzne dla renderera: Zawierają tylko Roact, sugerując oddzielny komponent
#    renderujący, który głównie zajmuje się UI lub elementami wizualnymi.
# 
# Plik zawiera również zależności deweloperskie i flagi funkcji, umożliwiające
# warunkową kompilację i integrację narzędzi.
# 
# Ta struktura wspiera architekturę klient-serwer, gdzie:
# - Serwer (backend) obsługuje logikę gry, zarządzanie stanem i potencjalnie integruje się
#   z usługami zewnętrznymi (np. bot Discord, usługi internetowe).
# - Klient (frontend oparty na Roblox) zarządza interfejsem użytkownika i lokalnym stanem gry.
# - Komponent renderujący może obsługiwać specjalistyczne zadania renderowania lub generowanie zasobów.
# 
# Komunikacja między tymi komponentami prawdopodobnie odbywa się poprzez protokoły sieciowe
# (np. HTTP, WebSocket) ułatwione przez platformę Roblox i potencjalnie niestandardowe
# rozwiązania sieciowe.
