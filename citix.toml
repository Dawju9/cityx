[server]
address = "127.0.0.1"  # Adres IP serwera (localhost)
port = 8080  # Port, na którym serwer będzie działać

[package]
name = "whitekali/cityx"  # Nazwa paczki projektu CityX
description = "CityX - The Si'automaticion city 'x' procedural and modular game framework"
version = "0.1.0"  # Wersja paczki
license = "MIT OR Apache-2.0"  # Licencja projektu
authors = ["Whitekali <Discord: whitekali> <whitekali@aya.studio> <@251838559680593920>"]
realm = "shared"  # Zakres projektu (np. shared między backendem a klientem)
registry = "https://github.com/UpliftGames/wally-index"  # Rejestr dla zależności Wally
private = true  # Paczka prywatna, niepubliczna

[dependencies]
matter = "matter-ecs/matter@0.8.3"  # Zależność ECS dla logiki gry
roact = "roblox/roact@1.4.0"  # Zależność do tworzenia komponentów UI
base64 = "reselim/base64@3.0.0"  # Kodowanie/odkodowywanie Base64
signal = "sleitnick/signal@2.0.1"  # Implementacja sygnałów i zdarzeń
trove = "sleitnick/trove@1.3.0"  # Zarządzanie zasobami w grze
promise = "evaera/promise@4.0.0"  # Obsługa Promise w grze

[server-dependencies]
matter = "matter-ecs/matter@0.8.3"  # Zależności serwera
promise = "evaera/promise@4.0.0"

[client-dependencies]
roact = "roblox/roact@1.4.0"  # Zależności klienta (np. UI)
signal = "sleitnick/signal@2.0.1"
trove = "sleitnick/trove@1.3.0"

[renderer-dependencies]
roact = "roblox/roact@1.4.0"  # Zależności renderera (jeśli inny niż klient)

[features]
selene = []  # Funkcja opcjonalna dla integracji z Selene
wally = []  # Funkcja opcjonalna dla integracji z Wally
tools = ["wally", "selene"]  # Narzędzia projektowe

[game]
# Konfiguracja specyficzna dla gry
# Przykładowe opcje, które można dodać:
# name = "CityX"
# max_players = 50
# genre = "Simulation"
[game.settings]
name = "CityX"  # Nazwa gry
version = "0.1.0"  # Wersja gry
genre = "Simulation"  # Gatunek gry
max_players = 100  # Maksymalna liczba graczy w jednej sesji
min_players = 1  # Minimalna liczba graczy potrzebna do rozpoczęcia rozgrywki
difficulty = "normal"  # Domyślny poziom trudności ("easy", "normal", "hard", "custom")
language = "en"  # Domyślny język gry
[game.test_place]
name = "CityX Test Place"
place_id = 0  # Na początek, ID będzie 0, ale będzie aktualizowane przez skrypt Lua
description = "This is the test place for CityX."
max_players = 10  # Ustaw maksymalną liczbę graczy dla testowego miejsca
is_public = false  # Ustawienie prywatności testowego miejsca

[game.settings.graphics]
resolution = "1920x1080"  # Rozdzielczość ekranu
fullscreen = true  # Tryb pełnoekranowy
vsync = true  # Synchronizacja pionowa
quality = "high"  # Jakość grafiki ("low", "medium", "high", "ultra")
anti_aliasing = true  # Włączone wygładzanie krawędzi

[game.settings.audio]
master_volume = 80  # Głośność ogólna (w skali 0-100)
music_volume = 70  # Głośność muzyki (w skali 0-100)
effects_volume = 75  # Głośność efektów dźwiękowych (w skali 0-100)
voice_chat_enabled = true  # Włączenie komunikacji głosowej

[game.settings.network]
server_tickrate = 30  # Częstotliwość aktualizacji serwera (w FPS)
region = "EU"  # Domyślny region serwera
latency_threshold = 150  # Maksymalna akceptowalna latencja (ms)

[game.settings.controls]
mouse_sensitivity = 1.0  # Czułość myszy
invert_y_axis = false  # Odwrócenie osi Y
keybindings = {  # Przykładowe klawiszowe skróty
    move_forward = "W",
    move_backward = "S",
    move_left = "A",
    move_right = "D",
    jump = "Space",
    crouch = "Ctrl",
    interact = "E"
}

[game.settings.customization]
character_skin = "default"  # Domyślny skin postaci
unlocked_skins = ["default", "warrior", "cyberpunk"]  # Odkryte skiny
custom_banner_color = "#FF0000"  # Kolor banera gracza


#Wczytaj konfigurację z citix.toml w kodzie Rust: Użyj biblioteki takiej jak toml_edit lub serde_toml, aby wczytać konfigurację z citix.toml w swoim kodzie Rust (np. w pliku main.rs backendu).